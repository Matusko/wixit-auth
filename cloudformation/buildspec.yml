version: 0.1
environment_variables:
  plaintext:
    CHILD_TEMPLATES: |
      cloudformation/stackset/microservice-templates/ecs-cluster.yaml
      cloudformation/stackset/microservice-templates/load-balancer-listener-rule.yaml
      cloudformation/stackset/microservice-templates/service.yaml
    TEMPLATE_FILES: |
      cloudformation/stackset/microservice.yaml
      cloudformation/stackset/microservice-templates/ecs-cluster.yaml
      cloudformation/stackset/microservice-templates/load-balancer-listener-rule.yaml
      cloudformation/stackset/microservice-templates/service.yaml
phases:
  install:
    commands:
      - apt update && apt install -y jq
  pre_build:
    commands:
      - $(aws ecr get-login --no-include-email)
      - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
      - echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      - echo "$IMAGE_URI"
      - echo "Validating CFN templates"
      - |
        for cfn_template in $TEMPLATE_FILES; do
          echo "Validating CloudFormation template file $cfn_template"
          aws cloudformation validate-template --template-body file://$cfn_template
        done
  build:
    commands:
      - echo mvn install
      - mvn install dockerfile:build
      - echo docker build
      - echo "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
      - $(aws ecr get-login --no-include-email)
      - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - echo "TAG"
      - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
      - echo "$IMAGE_URI"
      - docker build --build-arg JAR_FILE=target/wixit-auth-0.1.0-SNAPSHOT.jar --build-arg CONFIG_FILE=externalConfigTemplate.yml --tag "$IMAGE_URI" .
      - echo "Copying child stack templates to S3 bucket"
      - |
        for child_template in $CHILD_TEMPLATES; do
          aws s3 cp "$child_template" "s3://$TEMPLATE_BUCKET/codebuild/$child_template"
        done
      - |
        CONTEXT_PATH_ESCAPED=$(echo $CONTEXT_PATH | sed 's/\//\\\//g')
        CUSTOM_RAND_VAR=$(shuf -i 1-50000 -n 1)

        sed -i -e "s/CONTEXT_PATH_PLACEHOLDER/$CONTEXT_PATH_ESCAPED/" cloudformation/stackset/microservice-params-template.json
        sed -i -e "s/LOAD_BALANCER_LISTENER_RULE_PRIORITY_PLACEHOLDER/$CUSTOM_RAND_VAR/" cloudformation/stackset/microservice-params-template.json
        sed -i -e "s/TEMPLATE_BUCKET_PLACEHOLDER/$TEMPLATE_BUCKET\/codebuild/" cloudformation/stackset/microservice-params-template.json
        sed -i -e "s/ENVIRONMENT_STACK_SET_NAME_PLACEHOLDER/$ENVIRONMENT_STACK_SET_NAME/" cloudformation/stackset/microservice-params-template.json

        cp cloudformation/stackset/microservice-params-template.json cloudformation/stackset/microservice-params-dev.json
        cp cloudformation/stackset/microservice-params-template.json cloudformation/stackset/microservice-params-prod.json

        values=`cat cloudformation/config/dev/config.json`
        for s in $(echo $values | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
          export $s
        done
        sed -i -e "s/DATABASE_MASTER_USERNAME_PLACEHOLDER/$DATABASE_MASTER_USERNAME/" cloudformation/stackset/microservice-params-dev.json

        values=`cat cloudformation/config/prod/config.json`
        for s in $(echo $values | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
          export $s
        done
        sed -i -e "s/DATABASE_MASTER_USERNAME_PLACEHOLDER/$DATABASE_MASTER_USERNAME/" cloudformation/stackset/microservice-params-prod.json

        secret_string_escaped_json_dev=$(aws secretsmanager get-secret-value --region eu-west-1 --secret-id WixitDev | jq '.SecretString')
        secret_string_escaped_json_prod=$(aws secretsmanager get-secret-value --region eu-west-1 --secret-id WixitProd | jq '.SecretString')

        temp_dev="${secret_string_escaped_json_dev%\"}"
        temp_prod="${secret_string_escaped_json_prod%\"}"

        secret_string_json_dev="${temp_dev#\"}"
        secret_string_json_prod="${temp_prod#\"}"

        postgre_password_str_dev=$(echo $secret_string_json_dev | sed 's/\\//g' | jq .PostgreDbPassword)
        postgre_password_str_prod=$(echo $secret_string_json_prod | sed 's/\\//g' | jq .PostgreDbPassword)

        postgre_password_str_temp_dev="${postgre_password_str_dev%\"}"
        postgre_password_str_temp_prod="${postgre_password_str_prod%\"}"

        DATABASE_MASTER_PASSWORD_DEV="${postgre_password_str_temp_dev#\"}"
        DATABASE_MASTER_PASSWORD_PROD="${postgre_password_str_temp_prod#\"}"

        sed -i -e "s/DATABASE_MASTER_PASSWORD_PLACEHOLDER/$DATABASE_MASTER_PASSWORD_DEV/" cloudformation/stackset/microservice-params-dev.json
        sed -i -e "s/DATABASE_MASTER_PASSWORD_PLACEHOLDER/$DATABASE_MASTER_PASSWORD_PROD/" cloudformation/stackset/microservice-params-prod.json

        sed -i -e "s/ENVIRONMENT_PLACEHOLDER/DEV/" cloudformation/stackset/microservice-params-dev.json
        sed -i -e "s/ENVIRONMENT_PLACEHOLDER/PROD/" cloudformation/stackset/microservice-params-prod.json

      - |
        aws s3 cp "cloudformation/stackset/microservice.yaml" "s3://$TEMPLATE_BUCKET/codebuild/stackset/microservice.yaml"
        aws s3 cp "cloudformation/stackset/microservice-params-dev.json" "s3://$TEMPLATE_BUCKET/codebuild/stackset/microservice-params-dev.json"
        aws s3 cp "cloudformation/stackset/microservice-params-prod.json" "s3://$TEMPLATE_BUCKET/codebuild/stackset/microservice-params-prod.json"

  post_build:
    commands:
      - docker push "$IMAGE_URI"
      - printf '[{"name":"simple-app","imageUri":"%s"}]' "$IMAGE_URI" > images.json
      -
artifacts:
  files:
    - cloudformation/stackset/microservice.yaml
    - cloudformation/stackset/microservice-params-dev.json
    - cloudformation/stackset/microservice-params-prod.json
    - images.json